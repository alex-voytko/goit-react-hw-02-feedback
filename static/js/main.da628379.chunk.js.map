{"version":3,"sources":["components/FeedbackStat.module.css","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","App.js","index.js"],"names":["module","exports","Statistics","good","neutral","bad","total","positivePercentage","className","feedbackList","feedback","number","FeedbackOptions","options","onLeaveFeedback","btnCont","onClick","id","btn","Section","title","children","sectionTitle","App","state","handleCount","e","elementById","currentTarget","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","result","Math","round","this","cont","statCont","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,KAAO,2BAA2B,aAAe,mCAAmC,QAAU,8BAA8B,SAAW,+BAA+B,IAAM,0BAA0B,aAAe,mCAAmC,OAAS,6BAA6B,SAAW,iC,iJCgC5SC,EA7BI,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,IAAKC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,mBAA7B,OACf,qBAAIC,UAAWC,eAAf,UACI,oBAAID,UAAWE,WAAf,SACI,sCAAQ,sBAAMF,UAAWG,SAAjB,SAA0BR,SAEtC,oBAAIK,UAAWE,WAAf,SACI,yCAAW,sBAAMF,UAAWG,SAAjB,SAA0BP,SAEzC,oBAAII,UAAWE,WAAf,SACI,qCAAO,sBAAMF,UAAWG,SAAjB,SAA0BN,SAErC,oBAAIG,UAAWE,WAAf,SACI,uCAAS,sBAAMF,UAAWG,SAAjB,SAA0BL,SAEvC,oBAAIE,UAAWE,WAAf,SACI,mDAAqB,uBAAMF,UAAWG,SAAjB,UAA0BJ,EAA1B,gBCMlBK,EArBS,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,gBAAX,OACpB,mCACI,sBAAKN,UAAWO,UAAhB,UACI,wBAAQC,QAASF,EAAkCG,GAAIJ,EAAQ,GAAIL,UAAWU,MAA9E,iBAAuCL,EAAQ,IAG/C,wBAAQG,QAASF,EAAkCG,GAAIJ,EAAQ,GAAIL,UAAWU,MAA9E,oBAAuCL,EAAQ,IAG/C,wBAAQG,QAASF,EAAkCG,GAAIJ,EAAQ,GAAIL,UAAWU,MAA9E,gBAAuCL,EAAQ,UCC5CM,EAVC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACZ,qCACI,oBAAIb,UAAWc,eAAf,SAA8BF,IACzBC,MCoDEE,E,4MApDbC,MAAQ,CACJrB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEToB,YAAc,SAACC,GACb,IAAMC,EAAaD,EAAEE,cAAcX,GACnC,EAAKY,UAAS,SAACC,GACb,OAAO,eACJH,EAAcG,EAAUH,GAAc,O,EAI7CI,mBAAqB,WACjB,MAA2B,EAAKP,MAChC,OADA,EAAOrB,KAAP,EAAYC,QAAZ,EAAoBC,K,EAIxB2B,gCAAkC,WAC9B,IAAMC,EAASC,KAAKC,MAAM,EAAKX,MAAMrB,KAAK,EAAK4B,qBAAqB,KACpE,OAAKE,GAAe,G,4CAGxB,WACE,MAA2BG,KAAKZ,MAAzBrB,EAAP,EAAOA,KAAKC,EAAZ,EAAYA,QAAQC,EAApB,EAAoBA,IACb0B,EAAkEK,KAAlEL,mBAAmBC,EAA+CI,KAA/CJ,gCAAgCP,EAAeW,KAAfX,YACxD,OACI,sBAAKjB,UAAW6B,OAAhB,UACI,qBAAK7B,UAAW8B,WAAhB,SACI,cAAC,EAAD,CAASlB,MAAM,yBAAf,SACE,cAAC,EAAD,CACEP,QAAS,CAAC,OAAO,UAAU,OAC3BC,gBAAiBW,QAGzB,8BACI,cAAC,EAAD,CAASL,MAAM,aAAf,SACE,cAAC,EAAD,CACIjB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOyB,IACPxB,mBAAoByB,iB,GA3C1BO,a,MCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.da628379.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cont\":\"FeedbackStat_cont__KZmIN\",\"sectionTitle\":\"FeedbackStat_sectionTitle__2YZkm\",\"btnCont\":\"FeedbackStat_btnCont__zeQcR\",\"statCont\":\"FeedbackStat_statCont__2zyXi\",\"btn\":\"FeedbackStat_btn__32RGs\",\"feedbackList\":\"FeedbackStat_feedbackList__30buD\",\"number\":\"FeedbackStat_number__3YZIs\",\"feedback\":\"FeedbackStat_feedback__2S6gP\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {feedbackList,feedback, number} from \"../FeedbackStat.module.css\"\r\n\r\nconst Statistics = ({good, neutral, bad, total, positivePercentage}) => (\r\n    <ul className={feedbackList}>\r\n        <li className={feedback}>\r\n            <p>Good:<span className={number}>{good}</span></p>\r\n        </li>\r\n        <li className={feedback}>\r\n            <p>Neutral:<span className={number}>{neutral}</span></p>\r\n        </li>\r\n        <li className={feedback}>\r\n            <p>Bad:<span className={number}>{bad}</span></p>\r\n        </li>\r\n        <li className={feedback}>\r\n            <p>Total:<span className={number}>{total}</span></p>\r\n        </li>\r\n        <li className={feedback}>\r\n            <p>Positive feedback:<span className={number}>{positivePercentage}%</span></p>\r\n        </li>\r\n    </ul>\r\n)\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n}\r\n\r\n\r\nexport default Statistics","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {btnCont,btn} from \"../FeedbackStat.module.css\"\r\n\r\nconst FeedbackOptions = ({options, onLeaveFeedback}) => (\r\n    <>\r\n        <div className={btnCont}>\r\n            <button onClick={onLeaveFeedback} key={options[0]} id={options[0]} className={btn}>\r\n                Good\r\n            </button>\r\n            <button onClick={onLeaveFeedback} key={options[1]} id={options[1]} className={btn}>\r\n                Neutral\r\n            </button>\r\n            <button onClick={onLeaveFeedback} key={options[2]} id={options[2]} className={btn}>\r\n                Bad\r\n            </button>\r\n        </div>\r\n    </>\r\n)\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.oneOf(['good','neutral','bad']).isRequired,\r\n    onLeaveFeedback: PropTypes.func.isRequired\r\n}\r\n\r\nexport default FeedbackOptions","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {sectionTitle} from \"../FeedbackStat.module.css\"\r\n\r\nconst Section = ({title, children}) => (\r\n    <>\r\n        <h2 className={sectionTitle}>{title}</h2>\r\n            {children}\r\n    </>\r\n)\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n}\r\nexport default Section","import React, {Component} from 'react';\nimport Statistics from \"./components/Statistics\"\nimport FeedbackOptions from \"./components/FeedbackOptions\"\nimport Section from \"./components/Section\";\nimport {cont, statCont} from \"./components/FeedbackStat.module.css\"\n\nclass App extends Component {\n  state = {\n      good: 0,\n      neutral: 0,\n      bad: 0\n  }\n  handleCount = (e) => {\n    const elementById =e.currentTarget.id\n    this.setState((prevState) => {\n      return {\n        [elementById]: prevState[elementById] +1\n      }\n    })\n  }\n  countTotalFeedback = () => {\n      const {good,neutral,bad} = this.state\n      return good + neutral + bad\n  }\n  \n  countPositiveFeedbackPercentage = () => {\n      const result = Math.round(this.state.good/this.countTotalFeedback()*100)\n      if (!result) return 0\n      return result\n  }\n  render() {\n    const {good,neutral,bad} = this.state\n    const {countTotalFeedback,countPositiveFeedbackPercentage,handleCount} = this\n      return (\n          <div className={cont}>\n              <div className={statCont}>\n                  <Section title=\"Please, leave feedback\">\n                    <FeedbackOptions \n                      options={['good','neutral','bad']} \n                      onLeaveFeedback={handleCount}/>\n                  </Section>\n              </div>\n              <div>\n                  <Section title=\"Statistics\">\n                    <Statistics \n                        good={good} \n                        neutral={neutral} \n                        bad={bad} \n                        total={countTotalFeedback()} \n                        positivePercentage={countPositiveFeedbackPercentage()}\n                    />\n                  </Section>\n              </div>\n          </div>\n      )\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./styles.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}